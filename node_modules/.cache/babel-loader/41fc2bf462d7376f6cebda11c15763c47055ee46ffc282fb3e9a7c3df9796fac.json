{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Przemek\\\\web drink\\\\src\\\\dashboard\\\\components\\\\IngredientsSearchBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { connect } from \"react-redux\";\nimport { ApplicationState } from \"../../store/rootReducer\";\nimport { Ingredient } from \"../types/types\";\nimport { addIngredient } from \"../redux/actions/actions\";\nimport data from '../ingredientsSource/ingredients.json';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateProps = {\n  ingredients: Ingredient\n};\nconst DispatchProps = {\n  addIngredient: addIngredient\n};\nconst Props = StateProps & DispatchProps;\nlet nextArrayIndex = 0;\nconst IngredientsSearchBar = _ref => {\n  _s();\n  let {\n    ingredients,\n    addIngredient\n  } = _ref;\n  const [selectedItem, setSelectedItem] = useState([]); // selectedItem is used for \"cleaning input\"\n\n  const addSingleIngredient = name => selectedValue => {\n    addIngredient({\n      label: selectedValue[0].label,\n      unit: selectedValue[0].unit,\n      id: nextArrayIndex++\n    });\n    console.log(ingredients[0].payload);\n    // console.log(ingredients.ingredientsList[0].payload);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Typeahead, {\n      id: \"basic-example\",\n      onChange: addSingleIngredient('test'),\n      options: data.ingredientsList,\n      placeholder: \"Enter ingredients!\",\n      selected: selectedItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(IngredientsSearchBar, \"7nsDTK8qPxbamQoQ32y5vI3zALQ=\");\n_c = IngredientsSearchBar;\nexport default connect(state => ({\n  ingredients: state.ingredients.ingredientsList\n}), {\n  addIngredient: addIngredient\n})(IngredientsSearchBar);\nvar _c;\n$RefreshReg$(_c, \"IngredientsSearchBar\");","map":{"version":3,"names":["React","useState","useEffect","Typeahead","connect","ApplicationState","Ingredient","addIngredient","data","StateProps","ingredients","DispatchProps","Props","nextArrayIndex","IngredientsSearchBar","selectedItem","setSelectedItem","addSingleIngredient","name","selectedValue","label","unit","id","console","log","payload","ingredientsList","state"],"sources":["C:/Users/Przemek/web drink/src/dashboard/components/IngredientsSearchBar.jsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {connect} from \"react-redux\";\r\nimport {ApplicationState} from \"../../store/rootReducer\";\r\nimport {Ingredient} from \"../types/types\";\r\nimport {addIngredient} from \"../redux/actions/actions\";\r\nimport data from '../ingredientsSource/ingredients.json';\r\nconst StateProps = {\r\n    ingredients: Ingredient\r\n}\r\n\r\nconst DispatchProps = {\r\n    addIngredient: addIngredient\r\n}\r\nconst Props = StateProps & DispatchProps;\r\nlet nextArrayIndex = 0\r\n\r\nconst IngredientsSearchBar = ({ingredients, addIngredient}) => {\r\n    const [selectedItem, setSelectedItem] = useState([]); // selectedItem is used for \"cleaning input\"\r\n\r\n    const addSingleIngredient = (name) => (selectedValue) =>{\r\n        addIngredient({label: selectedValue[0].label, unit: selectedValue[0].unit, id: nextArrayIndex++});\r\n\r\n        console.log(ingredients[0].payload);\r\n        // console.log(ingredients.ingredientsList[0].payload);\r\n    }\r\n    \r\n    return <>\r\n            <Typeahead\r\n                id=\"basic-example\"\r\n                onChange={addSingleIngredient('test')}\r\n                options={data.ingredientsList}\r\n                placeholder=\"Enter ingredients!\"\r\n                selected={selectedItem}\r\n            />\r\n        </>;\r\n};\r\n\r\n\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        ingredients: state.ingredients.ingredientsList,\r\n    }), {\r\n        addIngredient: addIngredient\r\n    }\r\n)(IngredientsSearchBar);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAO,kCAAkC;AACzC,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,gBAAgB,QAAO,yBAAyB;AACxD,SAAQC,UAAU,QAAO,gBAAgB;AACzC,SAAQC,aAAa,QAAO,0BAA0B;AACtD,OAAOC,IAAI,MAAM,uCAAuC;AAAC;AAAA;AACzD,MAAMC,UAAU,GAAG;EACfC,WAAW,EAAEJ;AACjB,CAAC;AAED,MAAMK,aAAa,GAAG;EAClBJ,aAAa,EAAEA;AACnB,CAAC;AACD,MAAMK,KAAK,GAAGH,UAAU,GAAGE,aAAa;AACxC,IAAIE,cAAc,GAAG,CAAC;AAEtB,MAAMC,oBAAoB,GAAG,QAAkC;EAAA;EAAA,IAAjC;IAACJ,WAAW;IAAEH;EAAa,CAAC;EACtD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMgB,mBAAmB,GAAIC,IAAI,IAAMC,aAAa,IAAI;IACpDZ,aAAa,CAAC;MAACa,KAAK,EAAED,aAAa,CAAC,CAAC,CAAC,CAACC,KAAK;MAAEC,IAAI,EAAEF,aAAa,CAAC,CAAC,CAAC,CAACE,IAAI;MAAEC,EAAE,EAAET,cAAc;IAAE,CAAC,CAAC;IAEjGU,OAAO,CAACC,GAAG,CAACd,WAAW,CAAC,CAAC,CAAC,CAACe,OAAO,CAAC;IACnC;EACJ,CAAC;;EAED,oBAAO;IAAA,uBACC,QAAC,SAAS;MACN,EAAE,EAAC,eAAe;MAClB,QAAQ,EAAER,mBAAmB,CAAC,MAAM,CAAE;MACtC,OAAO,EAAET,IAAI,CAACkB,eAAgB;MAC9B,WAAW,EAAC,oBAAoB;MAChC,QAAQ,EAAEX;IAAa;MAAA;MAAA;MAAA;IAAA;EACzB,iBACH;AACX,CAAC;AAAC,GAnBID,oBAAoB;AAAA,KAApBA,oBAAoB;AAuB1B,eAAeV,OAAO,CACjBuB,KAAK,KAAM;EACRjB,WAAW,EAAEiB,KAAK,CAACjB,WAAW,CAACgB;AACnC,CAAC,CAAC,EAAE;EACAnB,aAAa,EAAEA;AACnB,CAAC,CACJ,CAACO,oBAAoB,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
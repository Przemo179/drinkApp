{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Przemek\\\\web drink\\\\src\\\\dashboard\\\\components\\\\IngredientsSearchBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { connect } from \"react-redux\";\nimport { ApplicationState } from \"../../store/rootReducer\";\nimport { Ingredient } from \"../types/types\";\nimport { addIngredient } from \"../redux/actions/actions\";\nimport data from '../ingredientsSource/ingredients.json';\n\n// const StateProps = {\n//     ingredients: Ingredient\n// }\n// const DispatchProps = {\n//     addIngredient: addIngredient\n// }\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet nextArrayId = 0;\nconst tempArray = [];\nconst IngredientsSearchBar = _ref => {\n  _s();\n  let {\n    StateProps,\n    addIngredient\n  } = _ref;\n  const [selectedItem, setSelectedItem] = useState([]); // selectedItem is used for \"cleaning input\"\n\n  const addSingleIngredient = name => selectedValue => {\n    if (tempArray.indexOf(selectedValue[0].label) === -1) {\n      tempArray.push(selectedValue[0].label);\n      addIngredient({\n        id: nextArrayId++,\n        label: selectedValue[0].label,\n        unit: selectedValue[0].unit\n      });\n      tempArray.push(selectedValue[0].label);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Typeahead, {\n      id: \"basic-example\",\n      onChange: addSingleIngredient('test'),\n      options: data.ingredientsList,\n      placeholder: \"Enter ingredients!\",\n      selected: selectedItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(IngredientsSearchBar, \"7nsDTK8qPxbamQoQ32y5vI3zALQ=\");\n_c = IngredientsSearchBar;\nexport default connect(state => ({\n  ingredients: state.ingredients.ingredientsList\n}), {\n  addIngredient: addIngredient\n})(IngredientsSearchBar);\nvar _c;\n$RefreshReg$(_c, \"IngredientsSearchBar\");","map":{"version":3,"names":["React","useState","useEffect","Typeahead","connect","ApplicationState","Ingredient","addIngredient","data","nextArrayId","tempArray","IngredientsSearchBar","StateProps","selectedItem","setSelectedItem","addSingleIngredient","name","selectedValue","indexOf","label","push","id","unit","ingredientsList","state","ingredients"],"sources":["C:/Users/Przemek/web drink/src/dashboard/components/IngredientsSearchBar.jsx"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {connect} from \"react-redux\";\r\nimport {ApplicationState} from \"../../store/rootReducer\";\r\nimport {Ingredient} from \"../types/types\";\r\nimport {addIngredient} from \"../redux/actions/actions\";\r\nimport data from '../ingredientsSource/ingredients.json';\r\n\r\n// const StateProps = {\r\n//     ingredients: Ingredient\r\n// }\r\n// const DispatchProps = {\r\n//     addIngredient: addIngredient\r\n// }\r\n\r\nlet nextArrayId = 0;\r\nconst tempArray = [];\r\n\r\nconst IngredientsSearchBar = ({StateProps, addIngredient}) => {\r\n    const [selectedItem, setSelectedItem] = useState([]); // selectedItem is used for \"cleaning input\"\r\n\r\n    const addSingleIngredient = (name) => (selectedValue) =>{\r\n\r\n        if(tempArray.indexOf(selectedValue[0].label) === -1)    {\r\n            tempArray.push(selectedValue[0].label)\r\n            addIngredient({\r\n                id: nextArrayId++,\r\n                label: selectedValue[0].label,\r\n                unit: selectedValue[0].unit,\r\n            });\r\n            tempArray.push(selectedValue[0].label)\r\n        }\r\n    }\r\n\r\n    return <>\r\n            <Typeahead\r\n                id=\"basic-example\"\r\n                onChange={addSingleIngredient('test')}\r\n                options={data.ingredientsList}\r\n                placeholder=\"Enter ingredients!\"\r\n                selected={selectedItem}\r\n            />\r\n        </>;\r\n};\r\n\r\n\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        ingredients: state.ingredients.ingredientsList,\r\n    }), {\r\n        addIngredient: addIngredient\r\n    }\r\n)(IngredientsSearchBar);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAO,kCAAkC;AACzC,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,gBAAgB,QAAO,yBAAyB;AACxD,SAAQC,UAAU,QAAO,gBAAgB;AACzC,SAAQC,aAAa,QAAO,0BAA0B;AACtD,OAAOC,IAAI,MAAM,uCAAuC;;AAExD;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA,IAAIC,WAAW,GAAG,CAAC;AACnB,MAAMC,SAAS,GAAG,EAAE;AAEpB,MAAMC,oBAAoB,GAAG,QAAiC;EAAA;EAAA,IAAhC;IAACC,UAAU;IAAEL;EAAa,CAAC;EACrD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMc,mBAAmB,GAAIC,IAAI,IAAMC,aAAa,IAAI;IAEpD,IAAGP,SAAS,CAACQ,OAAO,CAACD,aAAa,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK;MACpDT,SAAS,CAACU,IAAI,CAACH,aAAa,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC;MACtCZ,aAAa,CAAC;QACVc,EAAE,EAAEZ,WAAW,EAAE;QACjBU,KAAK,EAAEF,aAAa,CAAC,CAAC,CAAC,CAACE,KAAK;QAC7BG,IAAI,EAAEL,aAAa,CAAC,CAAC,CAAC,CAACK;MAC3B,CAAC,CAAC;MACFZ,SAAS,CAACU,IAAI,CAACH,aAAa,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC;IAC1C;EACJ,CAAC;EAED,oBAAO;IAAA,uBACC,QAAC,SAAS;MACN,EAAE,EAAC,eAAe;MAClB,QAAQ,EAAEJ,mBAAmB,CAAC,MAAM,CAAE;MACtC,OAAO,EAAEP,IAAI,CAACe,eAAgB;MAC9B,WAAW,EAAC,oBAAoB;MAChC,QAAQ,EAAEV;IAAa;MAAA;MAAA;MAAA;IAAA;EACzB,iBACH;AACX,CAAC;AAAC,GAzBIF,oBAAoB;AAAA,KAApBA,oBAAoB;AA6B1B,eAAeP,OAAO,CACjBoB,KAAK,KAAM;EACRC,WAAW,EAAED,KAAK,CAACC,WAAW,CAACF;AACnC,CAAC,CAAC,EAAE;EACAhB,aAAa,EAAEA;AACnB,CAAC,CACJ,CAACI,oBAAoB,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}